# .github/workflows/release.yml
name: Release CI

on:
  push:
    tags:
      - 'v*.*.*' # v1.0.0, v1.2.3 등 버전 태그에 트리거
  workflow_dispatch: # 수동 실행 가능

# --- 추가할 부분 ---
permissions:
  contents: write
# ------------------

jobs:
  # macOS 유니버설 빌드 작업
  build-macOS:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Add macOS targets for Universal Binary
        run: |
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin

      # 의존성 캐싱 (빌드 속도 향상)
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Cache node modules
        id: node_cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install frontend dependencies
        if: steps.node_cache.outputs.cache-hit != 'true'
        run: npm install

      - name: Build macOS Universal App
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version.'
          releaseDraft: true
          prerelease: false
          args: --target universal-apple-darwin

  # Windows NSIS 빌드 작업
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      # 의존성 캐싱 (빌드 속도 향상)
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Cache node modules
        id: node_cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install frontend dependencies
        if: steps.node_cache.outputs.cache-hit != 'true'
        run: npm install

      - name: Build Windows NSIS Installer
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version.'
          releaseDraft: true
          prerelease: false 