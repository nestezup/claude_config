name: macOS Universal Build
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  # 수동으로 워크플로우를 실행할 수도 있게 설정
  workflow_dispatch:

jobs:
  build-macos-universal:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Install dependencies
        run: npm install
      - name: Add Rust targets for Universal Binary
        run: |
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin
      - name: Build for Intel Mac (x86_64)
        run: |
          npm run tauri build -- --target x86_64-apple-darwin
      - name: Build for Apple Silicon Mac (aarch64)
        run: |
          npm run tauri build -- --target aarch64-apple-darwin
      - name: Create Universal Binary
        run: |
          mkdir -p universal/bundle/macos
          
          # 디버깅: 타겟 디렉토리 구조 확인
          echo "Checking target directory structure..."
          find src-tauri/target -type d -name "*.app" | sort
          
          # 정확한 앱 경로 찾기
          X86_APP_DIR=$(find src-tauri/target/x86_64-apple-darwin/release/bundle -type d -name "*.app" | head -1)
          AARCH64_APP_DIR=$(find src-tauri/target/aarch64-apple-darwin/release/bundle -type d -name "*.app" | head -1)
          
          echo "Intel app directory: $X86_APP_DIR"
          echo "Apple Silicon app directory: $AARCH64_APP_DIR"
          
          # 앱 이름 추출
          APPNAME=$(basename "$X86_APP_DIR")
          APPBASE=$(basename "$APPNAME" .app)
          
          echo "App name: $APPNAME"
          echo "App base name: $APPBASE"
          
          # 앱 내부 구조 확인
          echo "Checking app internal structure..."
          find "$X86_APP_DIR" -type f | grep -v '\.dSYM' | sort
          
          # Universal 앱 디렉토리 생성
          mkdir -p "universal/bundle/macos/$APPNAME/Contents/MacOS"
          
          # 앱 구조 복사
          cp -r "$X86_APP_DIR/Contents/Info.plist" "universal/bundle/macos/$APPNAME/Contents/"
          cp -r "$X86_APP_DIR/Contents/Resources" "universal/bundle/macos/$APPNAME/Contents/"
          
          # 바이너리 경로 확인
          X86_BINARY="$X86_APP_DIR/Contents/MacOS/$APPBASE"
          AARCH64_BINARY="$AARCH64_APP_DIR/Contents/MacOS/$APPBASE"
          
          echo "Intel binary path: $X86_BINARY"
          echo "Apple Silicon binary path: $AARCH64_BINARY"
          
          # 바이너리 존재 확인
          if [ ! -f "$X86_BINARY" ]; then
            echo "ERROR: Intel binary not found at: $X86_BINARY"
            exit 1
          fi
          
          if [ ! -f "$AARCH64_BINARY" ]; then
            echo "ERROR: Apple Silicon binary not found at: $AARCH64_BINARY"
            exit 1
          fi
          
          # Universal 바이너리 생성
          lipo -create -output "universal/bundle/macos/$APPNAME/Contents/MacOS/$APPBASE" \
            "$X86_BINARY" \
            "$AARCH64_BINARY"
          
          echo "Universal binary created successfully"
          echo "Contents of universal/bundle/macos:"
          find universal/bundle/macos -type f | sort
      - name: Upload macOS Universal Binary
        uses: actions/upload-artifact@v4
        with:
          name: macOS-Universal-tauri-build
          path: |
            universal/bundle/
