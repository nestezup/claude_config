name: macOS Universal Build
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  # 수동으로 워크플로우를 실행할 수도 있게 설정
  workflow_dispatch:

jobs:
  build-macos-universal:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Install dependencies
        run: npm install
      - name: Add Rust targets for Universal Binary
        run: |
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin
      - name: Build for Intel Mac (x86_64)
        run: |
          npm run tauri build -- --target x86_64-apple-darwin
      - name: Build for Apple Silicon Mac (aarch64)
        run: |
          npm run tauri build -- --target aarch64-apple-darwin
      - name: Create Universal Binary
        run: |
          mkdir -p universal/bundle/macos
          
          # 디버깅: 타겟 디렉토리 구조 확인
          echo "Checking target directory structure..."
          ls -la src-tauri/target/x86_64-apple-darwin/release/bundle/
          ls -la src-tauri/target/x86_64-apple-darwin/release/bundle/macos/
          
          # 앱 이름 얻기 (경로 수정)
          APPNAME=$(ls src-tauri/target/x86_64-apple-darwin/release/bundle/macos/*.app 2>/dev/null | xargs -n 1 basename 2>/dev/null || echo "")
          
          # 앱 이름이 비어있는 경우 다른 경로 구조 시도
          if [ -z "$APPNAME" ]; then
            echo "Trying alternative path structure..."
            APPNAME=$(find src-tauri/target/x86_64-apple-darwin/release/bundle -name "*.app" | xargs -n 1 basename 2>/dev/null || echo "")
          fi
          
          # 앱 이름이 여전히 비어있는 경우 오류 표시
          if [ -z "$APPNAME" ]; then
            echo "ERROR: Could not find .app bundle in target directory"
            echo "Checking all possible locations..."
            find src-tauri/target -name "*.app"
            exit 1
          fi
          
          echo "Found app: $APPNAME"
          APPBASE=$(basename "$APPNAME" .app)
          
          # 경로 확인을 위해 인텔 맥 앱의 내부 구조 확인
          X86_APP_PATH=$(find src-tauri/target/x86_64-apple-darwin/release/bundle -name "$APPNAME" -type d)
          AARCH64_APP_PATH=$(find src-tauri/target/aarch64-apple-darwin/release/bundle -name "$APPNAME" -type d)
          
          echo "Intel app path: $X86_APP_PATH"
          echo "Apple Silicon app path: $AARCH64_APP_PATH"
          
          # 앱 내부 구조 검사
          ls -la "$X86_APP_PATH/Contents/"
          
          # Universal 앱 디렉토리 생성
          mkdir -p "universal/bundle/macos/$APPNAME/Contents/MacOS"
          
          # 앱 구조 복사
          cp -r "$X86_APP_PATH/Contents/Info.plist" "universal/bundle/macos/$APPNAME/Contents/"
          cp -r "$X86_APP_PATH/Contents/Resources" "universal/bundle/macos/$APPNAME/Contents/"
          
          # Universal 바이너리 생성
          lipo -create -output "universal/bundle/macos/$APPNAME/Contents/MacOS/$APPBASE" \
            "$X86_APP_PATH/Contents/MacOS/$APPBASE" \
            "$AARCH64_APP_PATH/Contents/MacOS/$APPBASE"
      - name: Upload macOS Universal Binary
        uses: actions/upload-artifact@v4
        with:
          name: macOS-Universal-tauri-build
          path: |
            universal/bundle/
